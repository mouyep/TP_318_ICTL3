# Nom de l'application Spring Boot.
# Ce nom est utilisé pour l'enregistrement de l'application, par exemple dans des outils de monitoring.
spring.application.name=Tp318

# --- Configuration de la base de données PostgreSQL ---

# URL de connexion à la base de données PostgreSQL.
# Correction : "loclahost" doit être "localhost".
# Le format est jdbc:postgresql://<hôte>:<port>/<nom_de_la_base_de_donnees>
spring.datasource.url=jdbc:postgresql://localhost:5432/store_db

# Nom d'utilisateur pour se connecter à la base de données.
# Doit correspondre à l'utilisateur que vous avez créé dans PostgreSQL (ici, store_user).
spring.datasource.username=store_user

# Mot de passe pour l'utilisateur de la base de données.
# Assurez-vous que ce mot de passe correspond à celui défini pour 'store_user'.
spring.datasource.password=StoreUser@2025

# Nom de la classe du pilote JDBC pour PostgreSQL.
# Correction : Le nom correct est "org.postgresql.Driver", pas "com.psql.jdbc.driver".
spring.datasource.driver-class-name=org.postgresql.Driver

# --- Configuration JPA et Hibernate ---

# Stratégie de génération du schéma de la base de données par Hibernate.
# "update" tente de mettre à jour le schéma existant pour qu'il corresponde à vos entités.
# Autres options courantes : "create" (crée le schéma à chaque démarrage), "create-drop" (crée puis supprime à l'arrêt), "none" (désactive la gestion automatique du schéma).
spring.jpa.hibernate.ddl-auto=update

# Affiche les requêtes SQL générées par Hibernate dans la console.
# Cette propriété est spécifique à Hibernate.
spring.jpa.properties.hibernate.show_sql=true

# Définit le niveau de log pour les requêtes SQL générées par Hibernate.
# "debug" affichera les requêtes SQL, c'est utile pour le débogage.
logging.level.org.hibernate.SQL=debug

# Affiche également les requêtes SQL générées par JPA (qui utilise Hibernate en arrière-plan).
# C'est une propriété Spring Boot pour la même finalité que 'hibernate.show_sql'.
spring.jpa.show-sql=true

# Formate les requêtes SQL affichées pour une meilleure lisibilité.
# Rend les requêtes SQL indentées et plus faciles à lire dans les logs.
spring.jpa.properties.hibernate.format_sql=true